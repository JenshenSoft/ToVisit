apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'me.tatarka.retrolambda'

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libraries;
def testLibs = rootProject.ext.testingLibraries;

android {

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        warningsAsErrors = true;
    }

    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        applicationId cfg.package
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //apk name
        project.ext.set("archivesBaseName", "Test" + defaultConfig.versionName);

    }

    signingConfigs {
        release {
            try {
                storeFile file(project.property("toVisit.signing") + "/toVisit.jks")
                storePassword KEYSTORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            }
            catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    buildTypes {
        debug {
            resValue "string", "GOOGLE_PLACES_KEY", GOOGLE_PLACES_KEY_DEBUG
        }
        release {
            resValue "string", "GOOGLE_PLACES_KEY", GOOGLE_PLACES_KEY_REALISE
            debuggable true
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //support
    compile "com.android.support:appcompat-v7:${libs.supportVersion}"
    compile "com.android.support:recyclerview-v7:${libs.supportVersion}"
    compile "com.android.support:cardview-v7:${libs.supportVersion}"
    compile "com.android.support:preference-v7:${libs.supportVersion}"
    compile "com.android.support:design:${libs.supportVersion}"

    //google services
    compile "com.google.android.gms:play-services-maps:${libs.googleServicesApiVersion}"
    compile "com.google.android.gms:play-services-places:${libs.googleServicesApiVersion}"

    //reactive
    compile "io.reactivex.rxjava2:rxjava:${libs.reactiveVersion}"
    compile "io.reactivex.rxjava2:rxandroid:${libs.reactiveVersion}"
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0-RC2'

    //Dagger 2
    compile "com.google.dagger:dagger:${libs.daggerVersion}"
    apt "com.google.dagger:dagger-compiler:${libs.daggerVersion}"

    //Canary Leak
    debugCompile "com.squareup.leakcanary:leakcanary-android:${libs.canaryLeakVersion}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libs.canaryLeakVersion}"

    //Retrofit
    compile "com.squareup.retrofit2:retrofit:${libs.retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${libs.retrofitVersion}"
    compile "com.squareup.okhttp3:okhttp:${libs.okhttp3Version}"
    compile "com.squareup.okhttp3:logging-interceptor:${libs.okhttp3Version}"

    //mosby
    compile "com.hannesdorfmann.mosby:mvp:${libs.mosbyVersion}"
    compile "com.hannesdorfmann.mosby:viewstate:${libs.mosbyVersion}"

    //butter knife
    compile "com.jakewharton:butterknife:${libs.butterKnifeVersion}"
    apt "com.jakewharton:butterknife-compiler:${libs.butterKnifeVersion}"

    //testing
    testCompile "junit:junit:${testLibs.junit}"
}
